"""
Django settings for PythonBots project.

Generated by 'django-admin startproject' using Django 1.10.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import sys
from django.utils.translation import ugettext_lazy as _


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DEBUG_TOOLBAR_PATCH_SETTINGS = False

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY_pbots')

GOOGLE_ANALYTICS_PROPERTY_ID = os.environ.get('GOOGLE_ANALYTICS_PROPERTY_ID')
GOOGLE_ANALYTICS_DOMAIN = os.environ.get('GOOGLE_ANALYTICS_DOMAIN')


API_key = os.environ.get('API_key')
GOOGLE_ANALYTICS_CLIENT_ID = os.environ.get('GOOGLE_ANALYTICS_CLIENT_ID')
GOOGLE_ANALYTICS_CLIENT_SECRET = os.environ.get(
    'GOOGLE_ANALYTICS_CLIENT_SECRET')
GOOGLE_ANALYTICS_REFRESH_TOKEN = ''


GOOGLE_ANALYTICS_MODEL = True


DEBUG = False
if os.environ.get('DJANGO_DEVELOPMENT') is not None:
    DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    # 'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'posts',
    'comments',
    'pagedown',
    'reddit',
    'quote',
    'users',
    'klingon',
    # 'calendar_app',
    # 'rest_framework',
    # 'analytics',
    # 'channels',
]

AUTH_USER_MODEL = 'users.CustomUser'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'PythonBots.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),
                 os.path.join(BASE_DIR, 'templates', 'posts'),
                 os.path.join(BASE_DIR, 'templates', 'users'),
                 os.path.join(BASE_DIR, 'templates', 'calendar_app'),
                 os.path.join(BASE_DIR, 'templates', 'error')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'django.core.context_processors.i18n',
                #   'website.context_processors.google_analytics',
            ],
        },
    },
]

WSGI_APPLICATION = 'PythonBots.wsgi.application'
# ASGI_APPLICATION = 'PythonBots.routing.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

if os.environ.get('DJANGO_DEVELOPMENT') is not None:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ.get('dbname_pbots'),
            'USER': os.environ.get('dbuser_pbots'),
            'PASSWORD': os.environ.get('dbpassword_pbots'),
            'HOST': os.environ.get('hostipdev'),
            'PORT': os.environ.get('pnumber'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ.get('dbname_pbots'),
            'USER': os.environ.get('dbuser_pbots'),
            'PASSWORD': os.environ.get('dbpassword_pbots'),
            'HOST': os.environ.get('hostip'),
            'PORT': os.environ.get('pnumber'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/


STATIC_URL = '/static/'

STATICFILES_DIRS = [

    os.path.join(os.path.dirname(os.path.dirname(BASE_DIR)),
                 "src", "posts", "static"),
    # os.path.join(os.path.dirname(os.path.dirname(BASE_DIR)), "src", "comments", "static"),
    # os.path.join(os.path.dirname(os.path.dirname(BASE_DIR)), "src", "reddit", "static"),
    # os.path.join(os.path.dirname(os.path.dirname(BASE_DIR)), "src", "quote", "static"),
    # os.path.join(os.path.dirname(os.path.dirname(BASE_DIR)), "src", "users", "static"),

]

# for i in STATICFILES_DIRS:
#     print(i)


STATIC_ROOT = os.path.join(os.path.dirname(
    os.path.dirname(BASE_DIR)), "static")
print(STATIC_ROOT)

MEDIA_URL = "/media/"


MEDIA_ROOT = os.path.join(os.path.dirname(
    os.path.dirname(BASE_DIR)), "media")  # store files

# print("saved here",MEDIA_ROOT)


LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'


KLINGON_DEFAULT_LANGUAGE = 'en'


def ugettext(s): return s


LANGUAGES = (
    ('en', _('English')),
    ('de', _('German')),
    ('fr', _('French')),
    ('pt', _('Portuguese')),
)


LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

DJANGO_ADMIN_URL = 'admin/'

# Sentry

if os.environ.get('DJANGO_DEVELOPMENT') is None:
    import sentry_sdk # pylint: disable=import-error
    from sentry_sdk.integrations.django import DjangoIntegration # pylint: disable=import-error

    sentry_sdk.init(
        dsn="https://"+SENTRY_KEY+"@sentry.io/1467887", # pylint: disable=undefined-variable
        integrations=[DjangoIntegration()]
    )

